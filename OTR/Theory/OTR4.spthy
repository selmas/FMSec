theory OTR4
begin

/*
	Assignment 2.4: Improvement

	1. A -> B: g^x
	2. B -> A: g^y
	3. A -> B: 'A', sign{g^x, g^y}(skA), MAC('0', 'A')_Km, pkA
	4. B -> A: 'B', sign{g^x, g^y}(skB), MAC('1', 'B')_Km, pkB

*/

builtins: signing, diffie-hellman, hashing, symmetric-encryption
functions: mac/2
equations: mac(m, k) = <m, senc(m, k)>

// Public key infrastructure
rule Register_pk:
	[ Fr(~skA) ]
	--[ Register($A) ]->
	[ !Ltk($A, ~skA), !Pk($A, pk(~skA)), Out(pk(~skA))] 

rule Reveal_ltk:
	[ !Ltk(A, skA) ] --[ Reveal(A) ]-> [ Out(skA) ]

// Protocol rules
rule Init_Initiator:
	[ Fr(~id)
	, !Ltk($A, skA)
	, !Pk($B, pkB)
	]
	--[ Create_I($A, ~id, 'initiator') 
	]->
	[ St_A_1($A, ~id, $B, skA, pkB)
	]

rule Init_Responder:
	[ Fr(~id)
	, !Ltk($B, skB)
	, !Pk($A, pkA)
	]
  --[ Create_R($B, ~id, 'responder')
	]->
	[ St_B_1($B, ~id, $A, skB, pkA)
	]

// A -> B: g^x
rule A_1_Send:
	let 
		gx = 'g'^~x
	in
	[ St_A_1($A, ~id, $B, skA, pkB)
	, Fr(~x)
	]
  --[ Send($A, gx)
  	, Unique(~id, skA)
	]->
	[ St_A_2($A, ~id, $B, skA, pkB, ~x)
	, Out(gx) ]

rule B_1_receive:
	[ St_B_1($B, ~id, $A, skB, pkA)
	, In(X)
	]
  --[ Receive($B, X)
  	, Unique(~id,skB)
	]->
	[ St_B_2($B, ~id, $A, skB, pkA, X)
	]

// B -> A: g^y
rule B_2_Send:
	let 
		gy = 'g'^~y
	in
	[ St_B_2($B, ~id, $A, skB, pkA, X)
	, Fr(~y)
	]
	--[ Send($B, gy)
	, Unique(~id, skB)
	]->
	[ St_B_3($B, ~id, $A, skB, pkA, X, ~y)
	, Out(gy)
	]

rule A_2_receive:
	[ St_A_2($A, ~id, $B, skA, pkB, ~x)
	, In(Y)
	]
  --[ Receive($A, Y)
	, Unique(~id, skA)
	]->
	[ St_A_3($A, ~id, $B, skA, pkB, ~x, Y) ]

// A -> B: 'A', sign{g^x, g^y}(skA), MAC('0', 'A')_Km, pkA
rule A_3_Send:
	let 
		gx = 'g'^~x
		Km = h(Y^~x)
		mac = mac(<'0', 'A'>, Km)
		mA1 = <'A', sign{gx, Y}skA, mac, pk(skA)>
	in
	[ St_A_3($A, ~id, $B, skA, pkB, ~x, Y)	]
  --[ Send($A, mA1)
  	, Unique(~id, skA)
  	, Running($A, $B, <'R', 'I', Y^~x>)
	]->
	[ St_A_4($A, ~id, $B, skA, pkB, ~x, Y, Km)
	, Out(mA1) ]

rule B_3_receive:
	let 
		gy = 'g'^~y
		Km = h(X^~y)
		mB1 = <'A', sig, <m, tag>, pkA>
	in
	[ St_B_3($B, ~id, $A, skB, pkA, X, ~y)
	, In(mB1)
	]
  --[ Receive($B, mB1)
  	, Unique(~id,skB)
  	, Equal(verify(sig, <X, gy>, pkA), true)
  	, Equal(m, sdec(tag, Km))
	]->
	[ St_B_4($B, ~id, $A, skB, pkA, X, ~y, Km) ]

// B -> A: 'B', sign{g^x, g^y}(skB), MAC('1', 'B')_Km, pkB
rule B_4_Send:
	let 
		gy = 'g'^~y
		Km = h(X^~y)
		mac = mac(<'1', 'B'>, Km)
		mB2 = <'B', sign{X, gy}skB, mac, pk(skB)>
	in
	[ St_B_4($B, ~id, $A, skB, pkA, X, ~y, Km) ]
	--[ Send($B, mB2)
	, Secret($B, Km)
	, Unique(~id, skB)
	, Honest($A)
	, Honest($B)
	, Running($B, $A, <'I', 'R', X^~y>)
	, Commit($B, $A, <'R', 'I', X^~y>)
	]->
	[  St_B_5($B, ~id, $A, skB, pkA, X, ~y, Km) 
	, Out(mB2)
	]

rule A_4_receive:
	let 
		gx = 'g'^~x
		Km = h(Y^~x)
		mA2 = <'B', sig, <m, tag>, pkB>
	in
	[ St_A_4($A, ~id, $B, skA, pkB, ~x, Y, Km)
	, In(mA2)
	]
  --[ Receive($A, mA2)
	, Secret($A, Km)
	, Unique(~id, skA)
	, Honest($A)
	, Honest($B)
	, Equal(verify(sig, <gx,Y>, pkB), true)
  	, Equal(m, sdec(tag, Km))
	, Commit($A, $B, <'I', 'R', Y^~x>)	]->
	[ St_A_5($A, ~id, $B, skA, pkB, ~x, Y, Km) ]


restriction onekeypername:
	"All A #A #j. Register(A)@A & Register(A)@j ==> #A = #j"

restriction equality:
	"All k1 k2 #i. Equal(k1, k2)@i ==> k1 = k2"

restriction unique:
	"All id1 id2 key #i #j. Unique(id1, key)@i & Unique(id2, key)@j ==> (id1 = id2)"

// This lemma gets verified
lemma executability:
  exists-trace
	"Ex A B K #i #j. 
		Secret(A, K)@i & Secret(B, K)@j & not (A = B) & not (Ex B #k. Reveal(B)@k)    	
		& (All A B id1 id2 #i #j. Create_I(A, id1, 'initiator')@i & Create_I(B, id2, 'initiator')@j ==> (A = B) & (id1 = id2))
    	& (All A B id1 id2 #i #j. Create_R(A, id1, 'responder')@i & Create_R(B, id2, 'responder')@j ==> (A = B) & (id1 = id2))"

// This lemma does not hold
lemma noninjectiveagreementINITIATOR:
	"All a b t #i.
		Commit(a,b,<'I','R',t>) @i
		==> (Ex #j. Running(b,a,<'I','R',t>) @j)
			| (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma does not hold
lemma injectiveagreementINITIATOR:
	"All a b t #i.
		Commit(a,b,<'I','R',t>) @i
		==> (Ex #j. Running(b,a,<'I','R',t>) @j
			& j < i
			& not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2 & not (#i2 = #i)))
			| (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma does not hold
lemma noninjectiveagreementRESPONDER:
	"All a b t #i.
		Commit(a,b,<'R','I',t>) @i
		==> (Ex #j. Running(b,a,<'R','I',t>) @j)
			| (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma does not hold
lemma injectiveagreementRESPONDER:
	"All a b t #i.
		Commit(a,b,<'R','I',t>) @i
		==> (Ex #j. Running(b,a,<'R','I',t>) @j
			& j < i
			& not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2 & not (#i2 = #i)))
			| (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end