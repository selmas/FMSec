theory P4
begin

/*
  Assignment 1.4: Replace the password by a nonce

	We replace the (low-entropy) password k(A, B) in the session key Kab by
	a (high-entropy) nonce s generated by A, i.e.,	Kab = kdf(s, x, y).
	We add the symmetric encryption of s with the hashed password h(k(A, B)) as a
	second (plaintext) component to the first message from A to B.

	1. A -> B: x,(s)h(k(A,B)
	2. B -> A: y
	3. A -> B: [B,y]Kab
	4. B -> A: [A,x]Kab


	The Goal is agreement of each role with the other role on both nonces x and y
	and secrecy of the session key Kab.
*/

builtins: symmetric-encryption, hashing
functions: mac/2, kdf/3
equations: mac(m, k) = <m, senc(m, k)>

rule Register:
	[ Fr(~sk) ]
	--[ Register($I, $R) ]-> 
	[ !Lkt($I, $R, ~sk) ]

rule Reveal_A:
	[!Lkt($I, $R, ltk)]
	--[Reveal($I)]->
	[Out(ltk)]
	
rule Reveal_B:
	[!Lkt($I, $R, ltk)]
	--[Reveal($R)]->
	[Out(ltk)]

rule Init_A:	
	[ Fr(~id)
	, Fr(~s)
	, !Lkt($A, $B, sk_AB)
	] 
	--[ Create($A, ~id, 'A') ]->
	[ St_A_1($A, ~id, $B, sk_AB, ~s) ] 

rule Init_B:
	[ Fr(~id)
	, !Lkt($A, $B, sk_AB)
	] 
	--[ Create($B, ~id, 'B') ]->
	[ St_B_1($B, ~id, $A, sk_AB) ] 

// A -> B: x,(s)h(k(A,B)
rule A_1_Send:
	[ Fr(~x)
	, St_A_1($A, id, $B, sk_AB, s) ]
	--[ Send_A_1(<~x, senc(s,h(sk_AB))>) ]->
	[ Out(<~x, senc(s,h(sk_AB))>)
	, St_A_2($A, id, $B, sk_AB, ~x, s) 
	]

rule B_1_Recv:
	[ In(<x, senc(s,h(sk_AB))>)
	, St_B_1($B, id, $A, sk_AB) ]
	--[ Receive_B_1(<x, senc(s,h(sk_AB))>) ]->
	[ St_B_2($B, id, $A, sk_AB, x, s) ]

// B -> A: y
rule B_2_Send:
	[ Fr(~y)
	, St_B_2($B, id, $A, sk_AB, x, s) ]
	--[ Send_B_2(~y) ]->
	[ Out(~y)	
	, St_B_3($B, id, $A, sk_AB, x, s, ~y) 
	]

rule A_2_Recv:
	[ In(y)
	, St_A_2($A, id, $B, sk_AB, x, s) ]
	--[ Receive_A_2(y) ]->
	[ St_A_3($A, id, $B, sk_AB, x, s, y) ]

// A -> B: [B,y]Kab
rule A_3_Send:
	let 
		Kab = kdf(s, x, y)
		m1 = mac(<$B,y>, Kab)
	in
	[ St_A_3($A, id, $B, sk_AB, x, s, y) ] 
	--[ Running($A, $B, <'R', 'I', y>)
	, Send_A_3(m1) ]->
	[ Out(m1)
	, St_A_4($A, id, $B, sk_AB, x, s, y, Kab) ] 

rule B_3_Recv:
	let 
		Kab = kdf(s,x,y)
		m2 = mac(<$B,y>, Kab)
	in
	[ In(m2)
	, St_B_3($B, id, $A, sk_AB, x, s, y) ]
	--[ Secret($B, Kab)
	, Honest($A)
	, Honest($B)
	, Commit($B, $A, <'R', 'I', y>)
	, Receive_B_3(m2)
	, Finish($B) ]->
	[ St_B_4($B, id, $A, sk_AB, x, s, y, Kab) ]

// B -> A: [A,x]Kab
rule B_4_Send:
	let 
		m3 = mac(<$A,x>, Kab)
	in
	[ St_B_4($B, id, $A, sk_AB, x, s, y, Kab) ] 
	--[ Running($B, $A, <'I', 'R', x>)
	, Send_B_4(m3) ]->
	[ Out(m3)
	, St_B_5($B, id, $A, sk_AB, x, s,y, Kab) ] 

rule A_4_Recv:
	let 
		m4 = mac(<$A,x>, Kab)
	in
	[ In(m4)
	, St_A_4($A, id, $B, sk_AB, x, s, y, Kab) ]
	--[ Secret($A, Kab)
	, Honest($A)
	, Honest($B)
	, Commit($A, $B, <'I', 'R', x>)
	, Receive_A_4(m4)
	, Finish($A) ]->
	[ St_A_5($A, id, $B, sk_AB, x, y, Kab) ]

restriction onekeyperpair:
  "All A B #i #j. Register(A, B)@i & Register(A, B)@j ==> #i = #j"

restriction nokeywithyourself:
  "All A B #i. Register(A, B)@i ==> not (A = B)"

// This lemma gets verified
lemma executable:
  exists-trace
    "Ex A B #i #j. Finish(A)@i & Finish(B)@j & not (A = B)"

// This lemma gets verified
lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified
lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified
lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

// This lemma gets verified
lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


end