theory P5d begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, mac/2, map/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    mac(m, k) = <m, senc(m, k)>,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register:
   [ Fr( ~sk ) ] --[ Register( $I, $R ) ]-> [ !Lkt( $I, $R, ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_A:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $I ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_B:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $R ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), Fr( ~s ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $A, ~id, 'A' ) ]->
   [ St_A_1( $A, ~id, $B, sk_AB, ~s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $B, ~id, 'B' ) ]->
   [ St_B_1( $B, ~id, $A, sk_AB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_Send:
   [ Fr( ~x ), St_A_1( $A, id, $B, sk_AB, s ) ]
  --[ Send_A_1( <map(<s, 'p'>)^~x, senc(s, h(sk_AB)), 'p'> ) ]->
   [
   Out( <map(<s, 'p'>)^~x, senc(s, h(sk_AB)), 'p'> ),
   St_A_2( $A, id, $B, sk_AB, ~x, s, 'p' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_Recv:
   [ In( <gx, senc(s, h(sk_AB)), 'p'> ), St_B_1( $B, id, $A, sk_AB ) ]
  --[ Receive_B_1( <gx, senc(s, h(sk_AB)), 'p'> ) ]->
   [ St_B_2( $B, id, $A, sk_AB, gx, s, 'p' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_Send:
   [ Fr( ~y ), St_B_2( $B, id, $A, sk_AB, gx, s, 'p' ) ]
  --[ Send_B_2( map(<s, 'p'>)^~y ) ]->
   [
   Out( map(<s, 'p'>)^~y ),
   St_B_3( $B, id, $A, sk_AB, gx, s, 'p', ~y )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_Recv:
   [ In( gy ), St_A_2( $A, id, $B, sk_AB, x, s, 'p' ) ]
  --[ Receive_A_2( gy ) ]->
   [ St_A_3( $A, id, $B, sk_AB, x, s, 'p', gy ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3_Send:
   [ St_A_3( $A, id, $B, sk_AB, x, s, 'p', gy ) ]
  --[
  Running( $A, $B, <'R', 'I', map(<s, 'p'>)^x, gy, h(gy^x)> ),
  Send_A_3( mac(gy, h(gy^x)) )
  ]->
   [
   Out( mac(gy, h(gy^x)) ),
   St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, h(gy^x) )
   ]

  /*
  rule (modulo AC) A_3_Send:
     [ St_A_3( $A, id, $B, sk_AB, x, s, 'p', gy ) ]
    --[
    Running( $A, $B, <'R', 'I', z.1, gy, h(z)> ),
    Send_A_3( <gy, senc(gy, h(z))> )
    ]->
     [
     Out( <gy, senc(gy, h(z))> ),
     St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, h(z) )
     ]
    variants (modulo AC)
     1. gy    = gy.22
        s     = s.24
        x     = one
        z     = gy.22
        z.1   = map(<s.24, 'p'>)
    
     2. gy    = gy.24
        s     = s.26
        x     = x.28
        z     = gy.24^x.28
        z.1   = map(<s.26, 'p'>)^x.28
    
     3. gy    = z.30^inv(x.27)
        s     = s.25
        x     = x.27
        z     = z.30
        z.1   = map(<s.25, 'p'>)^x.27
    
     4. gy    = z.126^x.236
        s     = s.121
        x     = inv(x.236)
        z     = z.126
        z.1   = map(<s.121, 'p'>)^inv(x.236)
    
     5. gy    = z.127^(x.237*inv(x.238))
        s     = s.122
        x     = (x.238*inv(x.237))
        z     = z.127
        z.1   = map(<s.122, 'p'>)^(x.238*inv(x.237))
    
     6. gy    = x.235^x.236
        s     = s.121
        x     = x.123
        z     = x.235^(x.123*x.236)
        z.1   = map(<s.121, 'p'>)^x.123
    
     7. gy    = x.235^(x.236*inv(x.123))
        s     = s.121
        x     = x.123
        z     = x.235^x.236
        z.1   = map(<s.121, 'p'>)^x.123
    
     8. gy    = x.236^inv((x.124*x.238))
        s     = s.122
        x     = x.124
        z     = x.236^inv(x.238)
        z.1   = map(<s.122, 'p'>)^x.124
    
     9. gy    = x.236^(x.237*x.238)
        s     = s.122
        x     = inv(x.237)
        z     = x.236^x.238
        z.1   = map(<s.122, 'p'>)^inv(x.237)
    
    10. gy    = x.237^(x.238*x.239*inv(x.240))
        s     = s.123
        x     = (x.240*inv(x.238))
        z     = x.237^x.239
        z.1   = map(<s.123, 'p'>)^(x.240*inv(x.238))
    
    11. gy    = x.237^(x.238*inv((x.125*x.240)))
        s     = s.123
        x     = x.125
        z     = x.237^(x.238*inv(x.240))
        z.1   = map(<s.123, 'p'>)^x.125
    
    12. gy    = x.237^(x.238*inv((x.239*x.240)))
        s     = s.123
        x     = (x.239*inv(x.238))
        z     = x.237^inv(x.240)
        z.1   = map(<s.123, 'p'>)^(x.239*inv(x.238))
    
    13. gy    = x.238^(x.239*x.240*inv((x.241*x.242)))
        s     = s.124
        x     = (x.241*inv(x.239))
        z     = x.238^(x.240*inv(x.242))
        z.1   = map(<s.124, 'p'>)^(x.241*inv(x.239))
    
    14. gy    = x.239^x.240
        s     = s.125
        x     = inv((x.240*x.244))
        z     = x.239^inv(x.244)
        z.1   = map(<s.125, 'p'>)^inv((x.240*x.244))
    
    15. gy    = x.239^x.240
        s     = s.125
        x     = (x.244*inv(x.240))
        z     = x.239^x.244
        z.1   = map(<s.125, 'p'>)^(x.244*inv(x.240))
    
    16. gy    = x.239^inv(x.240)
        s     = s.125
        x     = inv(x.244)
        z     = x.239^inv((x.240*x.244))
        z.1   = map(<s.125, 'p'>)^inv(x.244)
    
    17. gy    = x.239^inv(x.240)
        s     = s.125
        x     = (x.240*x.244)
        z     = x.239^x.244
        z.1   = map(<s.125, 'p'>)^(x.240*x.244)
    
    18. gy    = x.240^x.241
        s     = s.126
        x     = (x.245*inv((x.241*x.246)))
        z     = x.240^(x.245*inv(x.246))
        z.1   = map(<s.126, 'p'>)^(x.245*inv((x.241*x.246)))
    
    19. gy    = x.240^inv(x.241)
        s     = s.126
        x     = (x.245*inv(x.246))
        z     = x.240^(x.245*inv((x.241*x.246)))
        z.1   = map(<s.126, 'p'>)^(x.245*inv(x.246))
    
    20. gy    = x.240^inv((x.241*x.242))
        s     = s.126
        x     = (x.241*x.246)
        z     = x.240^(x.246*inv(x.242))
        z.1   = map(<s.126, 'p'>)^(x.241*x.246)
    
    21. gy    = x.240^inv((x.241*x.242))
        s     = s.126
        x     = (x.241*inv(x.246))
        z     = x.240^inv((x.242*x.246))
        z.1   = map(<s.126, 'p'>)^(x.241*inv(x.246))
    
    22. gy    = x.240^(x.241*x.242)
        s     = s.126
        x     = inv((x.241*x.246))
        z     = x.240^(x.242*inv(x.246))
        z.1   = map(<s.126, 'p'>)^inv((x.241*x.246))
    
    23. gy    = x.240^(x.241*x.242)
        s     = s.126
        x     = (x.246*inv(x.241))
        z     = x.240^(x.242*x.246)
        z.1   = map(<s.126, 'p'>)^(x.246*inv(x.241))
    
    24. gy    = x.240^(x.241*inv(x.242))
        s     = s.126
        x     = inv(x.246)
        z     = x.240^(x.241*inv((x.242*x.246)))
        z.1   = map(<s.126, 'p'>)^inv(x.246)
    
    25. gy    = x.240^(x.241*inv(x.242))
        s     = s.126
        x     = inv((x.241*x.246))
        z     = x.240^inv((x.242*x.246))
        z.1   = map(<s.126, 'p'>)^inv((x.241*x.246))
    
    26. gy    = x.240^(x.241*inv(x.242))
        s     = s.126
        x     = (x.242*x.246)
        z     = x.240^(x.241*x.246)
        z.1   = map(<s.126, 'p'>)^(x.242*x.246)
    
    27. gy    = x.240^(x.241*inv(x.242))
        s     = s.126
        x     = (x.242*x.246*inv(x.241))
        z     = x.240^x.246
        z.1   = map(<s.126, 'p'>)^(x.242*x.246*inv(x.241))
    
    28. gy    = x.240^(x.241*inv(x.242))
        s     = s.126
        x     = (x.242*inv((x.241*x.246)))
        z     = x.240^inv(x.246)
        z.1   = map(<s.126, 'p'>)^(x.242*inv((x.241*x.246)))
    
    29. gy    = x.241^inv((x.242*x.243))
        s     = s.127
        x     = (x.242*x.247*inv(x.248))
        z     = x.241^(x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.242*x.247*inv(x.248))
    
    30. gy    = x.241^(x.242*x.243)
        s     = s.127
        x     = (x.247*inv((x.242*x.248)))
        z     = x.241^(x.243*x.247*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.247*inv((x.242*x.248)))
    
    31. gy    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        x     = inv((x.242*x.248))
        z     = x.241^(x.243*inv((x.244*x.248)))
        z.1   = map(<s.127, 'p'>)^inv((x.242*x.248))
    
    32. gy    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        x     = (x.244*x.248*inv(x.242))
        z     = x.241^(x.243*x.248)
        z.1   = map(<s.127, 'p'>)^(x.244*x.248*inv(x.242))
    
    33. gy    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        x     = (x.244*inv((x.242*x.248)))
        z     = x.241^(x.243*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.244*inv((x.242*x.248)))
    
    34. gy    = x.241^(x.242*inv(x.243))
        s     = s.127
        x     = (x.243*x.247*inv((x.242*x.248)))
        z     = x.241^(x.247*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.243*x.247*inv((x.242*x.248)))
    
    35. gy    = x.241^(x.242*inv(x.243))
        s     = s.127
        x     = (x.247*inv(x.248))
        z     = x.241^(x.242*x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.247*inv(x.248))
    
    36. gy    = x.241^(x.242*inv(x.243))
        s     = s.127
        x     = (x.247*inv((x.242*x.248)))
        z     = x.241^(x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.247*inv((x.242*x.248)))
    
    37. gy    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        x     = (x.243*x.248)
        z     = x.241^(x.242*x.248*inv(x.244))
        z.1   = map(<s.127, 'p'>)^(x.243*x.248)
    
    38. gy    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        x     = (x.243*x.248*inv(x.242))
        z     = x.241^(x.248*inv(x.244))
        z.1   = map(<s.127, 'p'>)^(x.243*x.248*inv(x.242))
    
    39. gy    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        x     = (x.243*inv(x.248))
        z     = x.241^(x.242*inv((x.244*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.243*inv(x.248))
    
    40. gy    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        x     = (x.243*inv((x.242*x.248)))
        z     = x.241^inv((x.244*x.248))
        z.1   = map(<s.127, 'p'>)^(x.243*inv((x.242*x.248)))
    
    41. gy    = x.242^(x.243*x.244*inv(x.245))
        s     = s.128
        x     = (x.245*x.249*inv((x.243*x.250)))
        z     = x.242^(x.244*x.249*inv(x.250))
        z.1   = map(<s.128, 'p'>)^(x.245*x.249*inv((x.243*x.250)))
    
    42. gy    = x.242^(x.243*x.244*inv(x.245))
        s     = s.128
        x     = (x.249*inv((x.243*x.250)))
        z     = x.242^(x.244*x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.249*inv((x.243*x.250)))
    
    43. gy    = x.242^(x.243*x.244*inv((x.245*x.246)))
        s     = s.128
        x     = (x.245*x.250*inv(x.243))
        z     = x.242^(x.244*x.250*inv(x.246))
        z.1   = map(<s.128, 'p'>)^(x.245*x.250*inv(x.243))
    
    44. gy    = x.242^(x.243*x.244*inv((x.245*x.246)))
        s     = s.128
        x     = (x.245*inv((x.243*x.250)))
        z     = x.242^(x.244*inv((x.246*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.245*inv((x.243*x.250)))
    
    45. gy    = x.242^(x.243*inv((x.244*x.245)))
        s     = s.128
        x     = (x.244*x.249*inv(x.250))
        z     = x.242^(x.243*x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.244*x.249*inv(x.250))
    
    46. gy    = x.242^(x.243*inv((x.244*x.245)))
        s     = s.128
        x     = (x.244*x.249*inv((x.243*x.250)))
        z     = x.242^(x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.244*x.249*inv((x.243*x.250)))
    
    47. gy    = x.243^(x.244*x.245*inv((x.246*x.247)))
        s     = s.129
        x     = (x.246*x.251*inv((x.244*x.252)))
        z     = x.243^(x.245*x.251*inv((x.247*x.252)))
        z.1   = map(<s.129, 'p'>)^(x.246*x.251*inv((x.244*x.252)))
  */

rule (modulo E) B_3_Recv:
   [
   In( mac(map(<s, 'p'>)^y, h(gx^y)) ),
   St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y )
   ]
  --[
  Secret( $B, h(gx^y) ), Honest( $A ), Honest( $B ),
  NotEqual( map(<s, 'p'>)^y, gx ),
  Commit( $B, $A, <'R', 'I', gx, map(<s, 'p'>)^y, h(gx^y)> ),
  Receive_B_3( mac(map(<s, 'p'>)^y, h(gx^y)) ), Finish( $B )
  ]->
   [ St_B_4( $B, id, $A, sk_AB, gx, s, 'p', y, h(gx^y) ) ]

  /*
  rule (modulo AC) B_3_Recv:
     [
     In( <z.1, senc(z.1, h(z))> ),
     St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y )
     ]
    --[
    Secret( $B, h(z) ), Honest( $A ), Honest( $B ),
    NotEqual( z.1, gx ), Commit( $B, $A, <'R', 'I', gx, z.1, h(z)> ),
    Receive_B_3( <z.1, senc(z.1, h(z))> ), Finish( $B )
    ]->
     [ St_B_4( $B, id, $A, sk_AB, gx, s, 'p', y, h(z) ) ]
    variants (modulo AC)
     1. gx    = gx.22
        s     = s.24
        y     = one
        z     = gx.22
        z.1   = map(<s.24, 'p'>)
    
     2. gx    = gx.24
        s     = s.26
        y     = y.28
        z     = gx.24^y.28
        z.1   = map(<s.26, 'p'>)^y.28
    
     3. gx    = z.30^inv(y.27)
        s     = s.25
        y     = y.27
        z     = z.30
        z.1   = map(<s.25, 'p'>)^y.27
    
     4. gx    = z.126^x.236
        s     = s.121
        y     = inv(x.236)
        z     = z.126
        z.1   = map(<s.121, 'p'>)^inv(x.236)
    
     5. gx    = z.127^(x.237*inv(x.238))
        s     = s.122
        y     = (x.238*inv(x.237))
        z     = z.127
        z.1   = map(<s.122, 'p'>)^(x.238*inv(x.237))
    
     6. gx    = x.235^x.236
        s     = s.121
        y     = y.123
        z     = x.235^(y.123*x.236)
        z.1   = map(<s.121, 'p'>)^y.123
    
     7. gx    = x.235^(x.236*inv(y.123))
        s     = s.121
        y     = y.123
        z     = x.235^x.236
        z.1   = map(<s.121, 'p'>)^y.123
    
     8. gx    = x.236^inv((y.124*x.238))
        s     = s.122
        y     = y.124
        z     = x.236^inv(x.238)
        z.1   = map(<s.122, 'p'>)^y.124
    
     9. gx    = x.236^(x.237*x.238)
        s     = s.122
        y     = inv(x.237)
        z     = x.236^x.238
        z.1   = map(<s.122, 'p'>)^inv(x.237)
    
    10. gx    = x.237^(x.238*x.239*inv(x.240))
        s     = s.123
        y     = (x.240*inv(x.238))
        z     = x.237^x.239
        z.1   = map(<s.123, 'p'>)^(x.240*inv(x.238))
    
    11. gx    = x.237^(x.238*inv((y.125*x.240)))
        s     = s.123
        y     = y.125
        z     = x.237^(x.238*inv(x.240))
        z.1   = map(<s.123, 'p'>)^y.125
    
    12. gx    = x.237^(x.238*inv((x.239*x.240)))
        s     = s.123
        y     = (x.239*inv(x.238))
        z     = x.237^inv(x.240)
        z.1   = map(<s.123, 'p'>)^(x.239*inv(x.238))
    
    13. gx    = x.238^(x.239*x.240*inv((x.241*x.242)))
        s     = s.124
        y     = (x.241*inv(x.239))
        z     = x.238^(x.240*inv(x.242))
        z.1   = map(<s.124, 'p'>)^(x.241*inv(x.239))
    
    14. gx    = x.239^x.240
        s     = s.125
        y     = inv((x.240*x.244))
        z     = x.239^inv(x.244)
        z.1   = map(<s.125, 'p'>)^inv((x.240*x.244))
    
    15. gx    = x.239^x.240
        s     = s.125
        y     = (x.244*inv(x.240))
        z     = x.239^x.244
        z.1   = map(<s.125, 'p'>)^(x.244*inv(x.240))
    
    16. gx    = x.239^inv(x.240)
        s     = s.125
        y     = inv(x.244)
        z     = x.239^inv((x.240*x.244))
        z.1   = map(<s.125, 'p'>)^inv(x.244)
    
    17. gx    = x.239^inv(x.240)
        s     = s.125
        y     = (x.240*x.244)
        z     = x.239^x.244
        z.1   = map(<s.125, 'p'>)^(x.240*x.244)
    
    18. gx    = x.240^x.241
        s     = s.126
        y     = (x.245*inv((x.241*x.246)))
        z     = x.240^(x.245*inv(x.246))
        z.1   = map(<s.126, 'p'>)^(x.245*inv((x.241*x.246)))
    
    19. gx    = x.240^inv(x.241)
        s     = s.126
        y     = (x.245*inv(x.246))
        z     = x.240^(x.245*inv((x.241*x.246)))
        z.1   = map(<s.126, 'p'>)^(x.245*inv(x.246))
    
    20. gx    = x.240^inv((x.241*x.242))
        s     = s.126
        y     = (x.241*x.246)
        z     = x.240^(x.246*inv(x.242))
        z.1   = map(<s.126, 'p'>)^(x.241*x.246)
    
    21. gx    = x.240^inv((x.241*x.242))
        s     = s.126
        y     = (x.241*inv(x.246))
        z     = x.240^inv((x.242*x.246))
        z.1   = map(<s.126, 'p'>)^(x.241*inv(x.246))
    
    22. gx    = x.240^(x.241*x.242)
        s     = s.126
        y     = inv((x.241*x.246))
        z     = x.240^(x.242*inv(x.246))
        z.1   = map(<s.126, 'p'>)^inv((x.241*x.246))
    
    23. gx    = x.240^(x.241*x.242)
        s     = s.126
        y     = (x.246*inv(x.241))
        z     = x.240^(x.242*x.246)
        z.1   = map(<s.126, 'p'>)^(x.246*inv(x.241))
    
    24. gx    = x.240^(x.241*inv(x.242))
        s     = s.126
        y     = inv(x.246)
        z     = x.240^(x.241*inv((x.242*x.246)))
        z.1   = map(<s.126, 'p'>)^inv(x.246)
    
    25. gx    = x.240^(x.241*inv(x.242))
        s     = s.126
        y     = inv((x.241*x.246))
        z     = x.240^inv((x.242*x.246))
        z.1   = map(<s.126, 'p'>)^inv((x.241*x.246))
    
    26. gx    = x.240^(x.241*inv(x.242))
        s     = s.126
        y     = (x.242*x.246)
        z     = x.240^(x.241*x.246)
        z.1   = map(<s.126, 'p'>)^(x.242*x.246)
    
    27. gx    = x.240^(x.241*inv(x.242))
        s     = s.126
        y     = (x.242*x.246*inv(x.241))
        z     = x.240^x.246
        z.1   = map(<s.126, 'p'>)^(x.242*x.246*inv(x.241))
    
    28. gx    = x.240^(x.241*inv(x.242))
        s     = s.126
        y     = (x.242*inv((x.241*x.246)))
        z     = x.240^inv(x.246)
        z.1   = map(<s.126, 'p'>)^(x.242*inv((x.241*x.246)))
    
    29. gx    = x.241^inv((x.242*x.243))
        s     = s.127
        y     = (x.242*x.247*inv(x.248))
        z     = x.241^(x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.242*x.247*inv(x.248))
    
    30. gx    = x.241^(x.242*x.243)
        s     = s.127
        y     = (x.247*inv((x.242*x.248)))
        z     = x.241^(x.243*x.247*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.247*inv((x.242*x.248)))
    
    31. gx    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        y     = inv((x.242*x.248))
        z     = x.241^(x.243*inv((x.244*x.248)))
        z.1   = map(<s.127, 'p'>)^inv((x.242*x.248))
    
    32. gx    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        y     = (x.244*x.248*inv(x.242))
        z     = x.241^(x.243*x.248)
        z.1   = map(<s.127, 'p'>)^(x.244*x.248*inv(x.242))
    
    33. gx    = x.241^(x.242*x.243*inv(x.244))
        s     = s.127
        y     = (x.244*inv((x.242*x.248)))
        z     = x.241^(x.243*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.244*inv((x.242*x.248)))
    
    34. gx    = x.241^(x.242*inv(x.243))
        s     = s.127
        y     = (x.243*x.247*inv((x.242*x.248)))
        z     = x.241^(x.247*inv(x.248))
        z.1   = map(<s.127, 'p'>)^(x.243*x.247*inv((x.242*x.248)))
    
    35. gx    = x.241^(x.242*inv(x.243))
        s     = s.127
        y     = (x.247*inv(x.248))
        z     = x.241^(x.242*x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.247*inv(x.248))
    
    36. gx    = x.241^(x.242*inv(x.243))
        s     = s.127
        y     = (x.247*inv((x.242*x.248)))
        z     = x.241^(x.247*inv((x.243*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.247*inv((x.242*x.248)))
    
    37. gx    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        y     = (x.243*x.248)
        z     = x.241^(x.242*x.248*inv(x.244))
        z.1   = map(<s.127, 'p'>)^(x.243*x.248)
    
    38. gx    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        y     = (x.243*x.248*inv(x.242))
        z     = x.241^(x.248*inv(x.244))
        z.1   = map(<s.127, 'p'>)^(x.243*x.248*inv(x.242))
    
    39. gx    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        y     = (x.243*inv(x.248))
        z     = x.241^(x.242*inv((x.244*x.248)))
        z.1   = map(<s.127, 'p'>)^(x.243*inv(x.248))
    
    40. gx    = x.241^(x.242*inv((x.243*x.244)))
        s     = s.127
        y     = (x.243*inv((x.242*x.248)))
        z     = x.241^inv((x.244*x.248))
        z.1   = map(<s.127, 'p'>)^(x.243*inv((x.242*x.248)))
    
    41. gx    = x.242^(x.243*x.244*inv(x.245))
        s     = s.128
        y     = (x.245*x.249*inv((x.243*x.250)))
        z     = x.242^(x.244*x.249*inv(x.250))
        z.1   = map(<s.128, 'p'>)^(x.245*x.249*inv((x.243*x.250)))
    
    42. gx    = x.242^(x.243*x.244*inv(x.245))
        s     = s.128
        y     = (x.249*inv((x.243*x.250)))
        z     = x.242^(x.244*x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.249*inv((x.243*x.250)))
    
    43. gx    = x.242^(x.243*x.244*inv((x.245*x.246)))
        s     = s.128
        y     = (x.245*x.250*inv(x.243))
        z     = x.242^(x.244*x.250*inv(x.246))
        z.1   = map(<s.128, 'p'>)^(x.245*x.250*inv(x.243))
    
    44. gx    = x.242^(x.243*x.244*inv((x.245*x.246)))
        s     = s.128
        y     = (x.245*inv((x.243*x.250)))
        z     = x.242^(x.244*inv((x.246*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.245*inv((x.243*x.250)))
    
    45. gx    = x.242^(x.243*inv((x.244*x.245)))
        s     = s.128
        y     = (x.244*x.249*inv(x.250))
        z     = x.242^(x.243*x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.244*x.249*inv(x.250))
    
    46. gx    = x.242^(x.243*inv((x.244*x.245)))
        s     = s.128
        y     = (x.244*x.249*inv((x.243*x.250)))
        z     = x.242^(x.249*inv((x.245*x.250)))
        z.1   = map(<s.128, 'p'>)^(x.244*x.249*inv((x.243*x.250)))
    
    47. gx    = x.243^(x.244*x.245*inv((x.246*x.247)))
        s     = s.129
        y     = (x.246*x.251*inv((x.244*x.252)))
        z     = x.243^(x.245*x.251*inv((x.247*x.252)))
        z.1   = map(<s.129, 'p'>)^(x.246*x.251*inv((x.244*x.252)))
  */

rule (modulo E) B_4_Send:
   [ St_B_4( $B, id, $A, sk_AB, gx, s, 'p', y, Kab ) ]
  --[
  Running( $B, $A, <'I', 'R', gx, map(<s, 'p'>)^y, Kab> ),
  Send_B_4( mac(gx, Kab) )
  ]->
   [
   Out( mac(gx, Kab) ),
   St_B_5( $B, id, $A, sk_AB, gx, s, 'p', y, Kab )
   ]

  /*
  rule (modulo AC) B_4_Send:
     [ St_B_4( $B, id, $A, sk_AB, gx, s, 'p', y, Kab ) ]
    --[
    Running( $B, $A, <'I', 'R', gx, z, Kab> ),
    Send_B_4( <gx, senc(gx, Kab)> )
    ]->
     [
     Out( <gx, senc(gx, Kab)> ),
     St_B_5( $B, id, $A, sk_AB, gx, s, 'p', y, Kab )
     ]
    variants (modulo AC)
    1. s     = s.22
       y     = one
       z     = map(<s.22, 'p'>)
    
    2. s     = s.24
       y     = y.26
       z     = map(<s.24, 'p'>)^y.26
  */

rule (modulo E) A_4_Recv:
   [
   In( mac(map(<s, 'p'>)^x, Kab) ),
   St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, Kab )
   ]
  --[
  Secret( $A, Kab ), Honest( $A ), Honest( $B ),
  NotEqual( map(<s, 'p'>)^x, gy ),
  Commit( $A, $B, <'I', 'R', map(<s, 'p'>)^x, gy, Kab> ),
  Receive_A_4( mac(map(<s, 'p'>)^x, Kab) ), Finish( $A )
  ]->
   [ St_A_5( $A, id, $B, sk_AB, x, s, 'p', gy, Kab ) ]

  /*
  rule (modulo AC) A_4_Recv:
     [
     In( <z, senc(z, Kab)> ),
     St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, Kab )
     ]
    --[
    Secret( $A, Kab ), Honest( $A ), Honest( $B ), NotEqual( z, gy ),
    Commit( $A, $B, <'I', 'R', z, gy, Kab> ),
    Receive_A_4( <z, senc(z, Kab)> ), Finish( $A )
    ]->
     [ St_A_5( $A, id, $B, sk_AB, x, s, 'p', gy, Kab ) ]
    variants (modulo AC)
    1. s     = s.18
       x     = one
       z     = map(<s.18, 'p'>)
    
    2. s     = s.20
       x     = x.22
       z     = map(<s.20, 'p'>)^x.22
  */

restriction inequality:
  "∀ k1 k2 #i. (NotEqual( k1, k2 ) @ #i) ⇒ (¬(k1 = k2))"
  // safety formula

lemma executable:
  exists-trace
  "∃ A B #i #j.
    (((((Finish( A ) @ #i) ∧ (Finish( B ) @ #j)) ∧ (¬(A = B))) ∧
      (¬(∃ X #r. Reveal( X ) @ #r))) ∧
     (∀ A.1 B.1 id1 id2 #i.1 #j.1.
       ((Create( A.1, id1, 'A' ) @ #i.1) ∧
        (Create( B.1, id2, 'A' ) @ #j.1)) ⇒
       ((A.1 = B.1) ∧ (id1 = id2)))) ∧
    (∀ A.1 B.1 id1 id2 #i.1 #j.1.
      ((Create( A.1, id1, 'B' ) @ #i.1) ∧
       (Create( B.1, id2, 'B' ) @ #j.1)) ⇒
      ((A.1 = B.1) ∧ (id1 = id2)))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B #i #j.
  (Finish( A ) @ #i) ∧ (Finish( B ) @ #j)
 ∧
  (¬(A = B)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ⇒ ⊥) ∧
  (∀ A.1 B.1 id1 id2 #i.1 #j.1.
    (Create( A.1, id1, 'A' ) @ #i.1) ∧ (Create( B.1, id2, 'A' ) @ #j.1)
   ⇒
    (A.1 = B.1) ∧ (id1 = id2)) ∧
  (∀ A.1 B.1 id1 id2 #i.1 #j.1.
    (Create( A.1, id1, 'B' ) @ #i.1) ∧ (Create( B.1, id2, 'B' ) @ #j.1)
   ⇒
    (A.1 = B.1) ∧ (id1 = id2))"
*/
simplify
solve( Finish( A ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, Kab ) ▶₁ #i )
    case A_3_Send
    solve( Finish( B.1 ) @ #j )
      case B_3_Recv
      solve( St_B_3( $B.1, id.1, $A.1, sk_AB, gx, s.1, 'p', y ) ▶₁ #j )
        case B_2_Send
        solve( !KU( senc(map(<~s, 'p'>)^~x, h(z)) ) @ #vk.2 )
          case B_4_Send
          solve( !KU( senc(map(<s.1, 'p'>)^~y, h(map(<~s, 'p'>)^(~x*~y)))
                 ) @ #vk.7 )
            case A_3_Send
            solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.8 )
              case A_1_Send
              solve( !KU( map(<~s, 'p'>)^~x ) @ #vk.5 )
                case A_1_Send
                solve( !KU( map(<~s, 'p'>)^~y ) @ #vk.8 )
                  case B_2_Send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x.1, s, 'p', gy, x ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(map(<~s, 'p'>)^~x, h(z)) ) @ #vk.3 )
      case A_3_Send
      solve( !KU( h(map(<~s, 'p'>)^(~x*~x.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<~s, 'p'>)^(~x*~x.1) ) @ #vk.5 )
          case A_1_Send_case_1
          by contradiction /* from formulas */
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.6 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_2_Send
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      qed
    next
      case B_4_Send
      solve( !KU( h(map(<~s, 'p'>)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<~s, 'p'>)^(~x*~y) ) @ #vk.12 )
          case A_1_Send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.17 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( h(gy^~x) ) @ #vk.2 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.5 )
            case A_1_Send_case_1
            solve( !KU( map(<~s, 'p'>) ) @ #vk.4 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case B_2_Send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.6 )
                case A_1_Send
                solve( !KU( ~sk ) @ #vk.9 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.6 )
          qed
        qed
      next
        case split_case_2
        solve( !KU( z^inv(~x) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x.1 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.7 )
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.2 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.5 )
            case A_1_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case A_1_Send_case_2
            solve( !KU( map(<~s, 'p'>)^x.1 ) @ #vk.5 )
              case A_1_Send_case_1
              by contradiction /* from formulas */
            next
              case A_1_Send_case_2
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case c_exp
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case B_2_Send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.9 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_Send_case_3
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case A_1_Send_case_5
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_6
            by solve( !KU( ~x.3 ) @ #vk.10 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.6 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      qed
    qed
  qed
next
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(map(<s, 'p'>)^~y, h(z)) ) @ #vk.3 )
      case A_3_Send
      solve( !KU( h(map(<s, 'p'>)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<s, 'p'>)^(~x*~y) ) @ #vk.9 )
          case A_1_Send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.13 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    next
      case B_4_Send
      solve( !KU( h(map(<s, 'p'>)^(~y*~y.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<s, 'p'>)^(~y*~y.1) ) @ #vk.15 )
          case A_1_Send
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.15 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.16 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y.2 ) @ #vk.20 )
        next
          case c_exp
          by solve( !KU( ~y ) @ #vk.18 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~sk)) ) @ #vk.7 )
        case A_1_Send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.4 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.9 )
              case A_1_Send
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_1
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case B_2_Send
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.1 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.11 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.4 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.9 )
              case A_1_Send_case_1
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case A_1_Send_case_2
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x.2 ) @ #vk.13 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x.3 ) @ #vk.14 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_2
              solve( !KU( map(<~s, 'p'>)^x ) @ #vk.8 )
                case A_1_Send_case_1
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case A_1_Send_case_2
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_Send_case_3
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_4
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_5
                by solve( !KU( ~x.2 ) @ #vk.15 )
              next
                case B_2_Send_case_1
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case B_2_Send_case_2
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case B_2_Send_case_3
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_4
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_5
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case c_exp
                solve( !KU( map(<~s, 'p'>) ) @ #vk.11 )
                  case A_1_Send
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                next
                  case B_2_Send
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case A_1_Send
                    solve( !KU( ~sk ) @ #vk.15 )
                      case Reveal_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_2_Send_case_6
              by solve( !KU( ~y.1 ) @ #vk.15 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_5
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.12 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        qed
      next
        case A_3_Send
        solve( !KU( ~sk^inv(~x) ) @ #vk.9 )
          case c_exp
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y, h(~sk)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.16 )
            case c_h
            solve( !KU( ~sk ) @ #vk.17 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.10 )
          case c_h
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x.1, s, 'p', gy, x ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(map(<~s, 'p'>)^~x, h(z)) ) @ #vk.3 )
      case A_3_Send
      solve( !KU( h(map(<~s, 'p'>)^(~x*~x.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<~s, 'p'>)^(~x*~x.1) ) @ #vk.5 )
          case A_1_Send_case_1
          by contradiction /* from formulas */
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.6 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_2_Send
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      qed
    next
      case B_4_Send
      solve( !KU( h(map(<~s, 'p'>)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<~s, 'p'>)^(~x*~y) ) @ #vk.12 )
          case A_1_Send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.17 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( h(gy^~x) ) @ #vk.2 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.5 )
            case A_1_Send_case_1
            solve( !KU( map(<~s, 'p'>) ) @ #vk.4 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case B_2_Send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.6 )
                case A_1_Send
                solve( !KU( ~sk ) @ #vk.9 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.6 )
          qed
        qed
      next
        case split_case_2
        solve( !KU( z^inv(~x) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x.1 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.7 )
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.2 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.5 )
            case A_1_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case A_1_Send_case_2
            solve( !KU( map(<~s, 'p'>)^x.1 ) @ #vk.5 )
              case A_1_Send_case_1
              by contradiction /* from formulas */
            next
              case A_1_Send_case_2
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case c_exp
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case B_2_Send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.9 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_Send_case_3
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case A_1_Send_case_5
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_6
            by solve( !KU( ~x.3 ) @ #vk.10 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.6 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.4 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      qed
    qed
  qed
next
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(map(<s, 'p'>)^~y, h(z)) ) @ #vk.3 )
      case A_3_Send
      solve( !KU( h(map(<s, 'p'>)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<s, 'p'>)^(~x*~y) ) @ #vk.9 )
          case A_1_Send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.13 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    next
      case B_4_Send
      solve( !KU( h(map(<s, 'p'>)^(~y*~y.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(<s, 'p'>)^(~y*~y.1) ) @ #vk.15 )
          case A_1_Send
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.15 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y.1 ) @ #vk.16 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y.2 ) @ #vk.20 )
        next
          case c_exp
          by solve( !KU( ~y ) @ #vk.18 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~sk)) ) @ #vk.7 )
        case A_1_Send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.4 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.9 )
              case A_1_Send
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_1
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case B_2_Send
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.1 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.11 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.4 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.9 )
              case A_1_Send_case_1
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case A_1_Send_case_2
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x.2 ) @ #vk.13 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x.3 ) @ #vk.14 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_2
              solve( !KU( map(<~s, 'p'>)^x ) @ #vk.8 )
                case A_1_Send_case_1
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case A_1_Send_case_2
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_Send_case_3
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_4
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_5
                by solve( !KU( ~x.2 ) @ #vk.15 )
              next
                case B_2_Send_case_1
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case B_2_Send_case_2
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case B_2_Send_case_3
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_4
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_5
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case c_exp
                solve( !KU( map(<~s, 'p'>) ) @ #vk.11 )
                  case A_1_Send
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                next
                  case B_2_Send
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case A_1_Send
                    solve( !KU( ~sk ) @ #vk.15 )
                      case Reveal_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_2_Send_case_6
              by solve( !KU( ~y.1 ) @ #vk.15 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_5
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.12 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        qed
      next
        case A_3_Send
        solve( !KU( ~sk^inv(~x) ) @ #vk.9 )
          case c_exp
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y, h(~sk)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.16 )
            case c_h
            solve( !KU( ~sk ) @ #vk.17 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.10 )
          case c_h
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, Kab ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(map(<~s, 'p'>)^~x, h(z)) ) @ #vk.2 )
      case A_3_Send
      solve( !KU( map(<~s, 'p'>)^~x.1 ) @ #vk.3 )
        case A_1_Send_case_1
        by contradiction /* from formulas */
      next
        case A_1_Send_case_2
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case B_2_Send
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case c_exp
        by solve( !KU( ~x.1 ) @ #vk.5 )
      qed
    next
      case B_4_Send
      solve( !KU( senc(map(<s.1, 'p'>)^~y, h(map(<~s, 'p'>)^(~x*~y)))
             ) @ #vk.7 )
        case A_3_Send
        solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.8 )
          case A_1_Send
          by contradiction /* from formulas */
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.10 )
            case A_1_Send
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(map(<~s, 'p'>)^(~x*~y)) ) @ #vk.11 )
          case c_h
          solve( !KU( map(<~s, 'p'>)^(~x*~y) ) @ #vk.12 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.15 )
          qed
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x.1 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.7 )
        qed
      next
        case split_case_2
        solve( !KU( h(gy^~x) ) @ #vk.4 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.5 )
            case A_1_Send_case_1
            solve( !KU( map(<~s, 'p'>) ) @ #vk.4 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case B_2_Send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.6 )
                case A_1_Send
                solve( !KU( ~sk ) @ #vk.9 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.6 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.4 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.5 )
            case A_1_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case A_1_Send_case_2
            solve( !KU( map(<~s, 'p'>)^x.1 ) @ #vk.5 )
              case A_1_Send_case_1
              by contradiction /* from formulas */
            next
              case A_1_Send_case_2
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case c_exp
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case B_2_Send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.9 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_Send_case_3
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case A_1_Send_case_5
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_6
            by solve( !KU( ~x.3 ) @ #vk.10 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.6 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, 'p', gy, Kab ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(map(<~s, 'p'>)^~x, h(z)) ) @ #vk.2 )
      case A_3_Send
      solve( !KU( map(<~s, 'p'>)^~x.1 ) @ #vk.3 )
        case A_1_Send_case_1
        by contradiction /* from formulas */
      next
        case A_1_Send_case_2
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case B_2_Send
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case c_exp
        by solve( !KU( ~x.1 ) @ #vk.5 )
      qed
    next
      case B_4_Send
      solve( !KU( senc(map(<s.1, 'p'>)^~y, h(map(<~s, 'p'>)^(~x*~y)))
             ) @ #vk.7 )
        case A_3_Send
        solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.8 )
          case A_1_Send
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'I', 'R', map(<~s, 'p'>)^~x, map(<~s, 'p'>)^~y, 
                            h(map(<~s, 'p'>)^(~x*~y))>
                   ) @ #i2 )
              case A_4_Recv
              solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, ~s, 'p',
                             map(<~s, 'p'>)^~y, h(map(<~s, 'p'>)^(~x*~y))
                     ) ▶₁ #i2 )
                case A_3_Send
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'I', 'R', map(<~s, 'p'>)^~x, map(<~s, 'p'>)^~y, 
                            h(map(<~s, 'p'>)^(~x*~y))>
                   ) @ #i2 )
              case A_4_Recv
              solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, ~s, 'p',
                             map(<~s, 'p'>)^~y, h(map(<~s, 'p'>)^(~x*~y))
                     ) ▶₁ #i2 )
                case A_3_Send
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.10 )
            case A_1_Send
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(map(<~s, 'p'>)^(~x*~y)) ) @ #vk.11 )
          case c_h
          solve( !KU( map(<~s, 'p'>)^(~x*~y) ) @ #vk.12 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.15 )
          qed
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x.1 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.1 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.7 )
        qed
      next
        case split_case_2
        solve( !KU( h(gy^~x) ) @ #vk.4 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.5 )
            case A_1_Send_case_1
            solve( !KU( map(<~s, 'p'>) ) @ #vk.4 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case B_2_Send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.6 )
                case A_1_Send
                solve( !KU( ~sk ) @ #vk.9 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_Send_case_2
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.6 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.4 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.5 )
            case A_1_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case A_1_Send_case_2
            solve( !KU( map(<~s, 'p'>)^x.1 ) @ #vk.5 )
              case A_1_Send_case_1
              by contradiction /* from formulas */
            next
              case A_1_Send_case_2
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case c_exp
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case B_2_Send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.9 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_Send_case_3
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case A_1_Send_case_5
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case A_1_Send_case_6
            by solve( !KU( ~x.3 ) @ #vk.10 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~x ) @ #vk.12 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~x ) @ #vk.7 )
          next
            case B_2_Send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.6 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x.2 ) @ #vk.8 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.8 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.3 )
          case A_1_Send_case_1
          by solve( !KU( ~x ) @ #vk.7 )
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_Send_case_3
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case A_1_Send_case_4
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case B_2_Send_case_1
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_Send_case_2
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_Send_case_3
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case B_2_Send_case_4
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(map(<s, 'p'>)^~y, h(z)) ) @ #vk.2 )
      case A_3_Send
      solve( !KU( senc(s, h(~sk)) ) @ #vk.6 )
        case A_1_Send
        solve( !KU( map(<~s, 'p'>)^~x ) @ #vk.5 )
          case A_1_Send_case_1
          by contradiction /* from formulas */
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_2_Send
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case A_3_Send
        solve( !KU( map(<~sk^inv(~x), 'p'>)^~x.1 ) @ #vk.5 )
          case B_2_Send
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.10 )
        qed
      next
        case B_4_Send
        solve( !KU( map(<~sk^inv(~y), 'p'>)^~x ) @ #vk.5 )
          case B_2_Send
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.9 )
          case c_h
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case B_4_Send
      solve( !KU( senc(s, h(~sk)) ) @ #vk.7 )
        case A_1_Send
        solve( !KU( senc(map(<s.1, 'p'>)^~y.1, h(map(<~s, 'p'>)^(~y*~y.1)))
               ) @ #vk.12 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~s, 'p'>)^(~y*~y.1)) ) @ #vk.14 )
            case c_h
            solve( !KU( map(<~s, 'p'>)^(~y*~y.1) ) @ #vk.15 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.19 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.2 ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.18 )
            qed
          qed
        qed
      next
        case A_3_Send
        solve( !KU( senc(map(<s, 'p'>)^~y.1,
                         h(map(<~sk^inv(~x), 'p'>)^(~y*~y.1)))
               ) @ #vk.12 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~sk^inv(~x), 'p'>)^(~y*~y.1)) ) @ #vk.15 )
            case c_h
            solve( !KU( map(<~sk^inv(~x), 'p'>)^(~y*~y.1) ) @ #vk.16 )
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.2 ) @ #vk.21 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.19 )
            qed
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y.2,
                         h(map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2)))
               ) @ #vk.13 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2)) ) @ #vk.21 )
            case c_h
            solve( !KU( map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2) ) @ #vk.22 )
              case B_2_Send_case_1
              by solve( !KU( ~y.1 ) @ #vk.22 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.2 ) @ #vk.23 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.3 ) @ #vk.27 )
            next
              case c_exp
              by solve( !KU( ~y.1 ) @ #vk.25 )
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.15 )
          case c_h
          solve( !KU( ~sk ) @ #vk.16 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~sk)) ) @ #vk.6 )
        case A_1_Send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.8 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.9 )
              case A_1_Send
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_1
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case B_2_Send
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.1 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.11 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.8 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.9 )
              case A_1_Send_case_1
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case A_1_Send_case_2
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x.2 ) @ #vk.13 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x.3 ) @ #vk.14 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_2
              solve( !KU( map(<~s, 'p'>)^x ) @ #vk.8 )
                case A_1_Send_case_1
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case A_1_Send_case_2
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_Send_case_3
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_4
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_5
                by solve( !KU( ~x.2 ) @ #vk.15 )
              next
                case B_2_Send_case_1
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case B_2_Send_case_2
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case B_2_Send_case_3
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_4
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_5
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case c_exp
                solve( !KU( map(<~s, 'p'>) ) @ #vk.11 )
                  case A_1_Send
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                next
                  case B_2_Send
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case A_1_Send
                    solve( !KU( ~sk ) @ #vk.15 )
                      case Reveal_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_2_Send_case_6
              by solve( !KU( ~y.1 ) @ #vk.15 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_5
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.12 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        qed
      next
        case A_3_Send
        solve( !KU( ~sk^inv(~x) ) @ #vk.9 )
          case c_exp
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y, h(~sk)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.16 )
            case c_h
            solve( !KU( ~sk ) @ #vk.17 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.10 )
          case c_h
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, gx, s, 'p', y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(map(<s, 'p'>)^~y, h(z)) ) @ #vk.2 )
      case A_3_Send
      solve( !KU( senc(s, h(~sk)) ) @ #vk.6 )
        case A_1_Send
        solve( !KU( map(<~s, 'p'>)^~x ) @ #vk.5 )
          case A_1_Send_case_1
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'R', 'I', map(<~s, 'p'>)^~x, map(<~s, 'p'>)^~y, 
                            h(map(<~s, 'p'>)^(~x*~y))>
                   ) @ #i2 )
              case B_3_Recv
              solve( St_B_3( $B.1, id.1, $A.1, sk_AB, map(<~s, 'p'>)^~x, ~s, 'p',
                             ~y
                     ) ▶₁ #i2 )
                case B_2_Send
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'R', 'I', map(<~s, 'p'>)^~x, map(<~s, 'p'>)^~y, 
                            h(map(<~s, 'p'>)^(~x*~y))>
                   ) @ #i2 )
              case B_3_Recv
              solve( St_B_3( $B.1, id.1, $A.1, sk_AB, map(<~s, 'p'>)^~x, ~s, 'p',
                             ~y
                     ) ▶₁ #i2 )
                case B_2_Send
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case A_1_Send_case_2
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case B_2_Send
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case A_3_Send
        solve( !KU( map(<~sk^inv(~x), 'p'>)^~x.1 ) @ #vk.5 )
          case B_2_Send
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.10 )
        qed
      next
        case B_4_Send
        solve( !KU( map(<~sk^inv(~y), 'p'>)^~x ) @ #vk.5 )
          case B_2_Send
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.9 )
          case c_h
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case B_4_Send
      solve( !KU( senc(s, h(~sk)) ) @ #vk.7 )
        case A_1_Send
        solve( !KU( senc(map(<s.1, 'p'>)^~y.1, h(map(<~s, 'p'>)^(~y*~y.1)))
               ) @ #vk.12 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~s, 'p'>)^(~y*~y.1)) ) @ #vk.14 )
            case c_h
            solve( !KU( map(<~s, 'p'>)^(~y*~y.1) ) @ #vk.15 )
              case A_1_Send
              by solve( !KU( ~x ) @ #vk.19 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.2 ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.18 )
            qed
          qed
        qed
      next
        case A_3_Send
        solve( !KU( senc(map(<s, 'p'>)^~y.1,
                         h(map(<~sk^inv(~x), 'p'>)^(~y*~y.1)))
               ) @ #vk.12 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~sk^inv(~x), 'p'>)^(~y*~y.1)) ) @ #vk.15 )
            case c_h
            solve( !KU( map(<~sk^inv(~x), 'p'>)^(~y*~y.1) ) @ #vk.16 )
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.2 ) @ #vk.21 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.19 )
            qed
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y.2,
                         h(map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2)))
               ) @ #vk.13 )
          case B_4_Send
          by contradiction /* cyclic */
        next
          case c_senc
          solve( !KU( h(map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2)) ) @ #vk.21 )
            case c_h
            solve( !KU( map(<~sk^inv(~y), 'p'>)^(~y.1*~y.2) ) @ #vk.22 )
              case B_2_Send_case_1
              by solve( !KU( ~y.1 ) @ #vk.22 )
            next
              case B_2_Send_case_2
              by solve( !KU( ~y.2 ) @ #vk.23 )
            next
              case B_2_Send_case_3
              by solve( !KU( ~y.3 ) @ #vk.27 )
            next
              case c_exp
              by solve( !KU( ~y.1 ) @ #vk.25 )
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.15 )
          case c_h
          solve( !KU( ~sk ) @ #vk.16 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~sk)) ) @ #vk.6 )
        case A_1_Send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.8 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.9 )
              case A_1_Send
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_1
              solve( !KU( map(<~s, 'p'>) ) @ #vk.7 )
                case A_1_Send
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case B_2_Send
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_Send
                  solve( !KU( ~sk ) @ #vk.12 )
                    case Reveal_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_Send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.1 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.11 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.8 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.9 )
              case A_1_Send_case_1
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case A_1_Send_case_2
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_3
              by solve( !KU( ~x.2 ) @ #vk.13 )
            next
              case A_1_Send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case A_1_Send_case_5
              by solve( !KU( ~x.3 ) @ #vk.14 )
            next
              case B_2_Send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_Send_case_2
              solve( !KU( map(<~s, 'p'>)^x ) @ #vk.8 )
                case A_1_Send_case_1
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case A_1_Send_case_2
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_Send_case_3
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_4
                by solve( !KU( ~x.1 ) @ #vk.13 )
              next
                case A_1_Send_case_5
                by solve( !KU( ~x.2 ) @ #vk.15 )
              next
                case B_2_Send_case_1
                by solve( !KU( ~y.1 ) @ #vk.11 )
              next
                case B_2_Send_case_2
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case B_2_Send_case_3
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_4
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case B_2_Send_case_5
                by solve( !KU( ~y.1 ) @ #vk.16 )
              next
                case c_exp
                solve( !KU( map(<~s, 'p'>) ) @ #vk.11 )
                  case A_1_Send
                  by solve( !KU( ~x.1 ) @ #vk.13 )
                next
                  case B_2_Send
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case A_1_Send
                    solve( !KU( ~sk ) @ #vk.15 )
                      case Reveal_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_Send_case_3
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case B_2_Send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case B_2_Send_case_5
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case B_2_Send_case_6
              by solve( !KU( ~y.1 ) @ #vk.15 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_5
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.12 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 )
            case A_1_Send_case_1
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case A_1_Send_case_2
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_Send_case_3
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case A_1_Send_case_4
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case B_2_Send_case_1
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case B_2_Send_case_2
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case B_2_Send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case B_2_Send_case_4
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        qed
      next
        case A_3_Send
        solve( !KU( ~sk^inv(~x) ) @ #vk.9 )
          case c_exp
          solve( !KU( ~sk ) @ #vk.10 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_Send
        solve( !KU( senc(map(<s, 'p'>)^~y, h(~sk)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.16 )
            case c_h
            solve( !KU( ~sk ) @ #vk.17 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~sk) ) @ #vk.10 )
          case c_h
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end