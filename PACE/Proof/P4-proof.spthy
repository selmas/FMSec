theory P4 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, kdf/3, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    mac(m, k) = <m, senc(m, k)>,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register:
   [ Fr( ~sk ) ] --[ Register( $I, $R ) ]-> [ !Lkt( $I, $R, ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_A:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $I ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_B:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $R ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), Fr( ~s ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $A, ~id, 'A' ) ]->
   [ St_A_1( $A, ~id, $B, sk_AB, ~s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $B, ~id, 'B' ) ]->
   [ St_B_1( $B, ~id, $A, sk_AB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_Send:
   [ Fr( ~x ), St_A_1( $A, id, $B, sk_AB, s ) ]
  --[ Send_A_1( <~x, senc(s, h(sk_AB))> ) ]->
   [
   Out( <~x, senc(s, h(sk_AB))> ), St_A_2( $A, id, $B, sk_AB, ~x, s )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_Recv:
   [ In( <x, senc(s, h(sk_AB))> ), St_B_1( $B, id, $A, sk_AB ) ]
  --[ Receive_B_1( <x, senc(s, h(sk_AB))> ) ]->
   [ St_B_2( $B, id, $A, sk_AB, x, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_Send:
   [ Fr( ~y ), St_B_2( $B, id, $A, sk_AB, x, s ) ]
  --[ Send_B_2( ~y ) ]->
   [ Out( ~y ), St_B_3( $B, id, $A, sk_AB, x, s, ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_Recv:
   [ In( y ), St_A_2( $A, id, $B, sk_AB, x, s ) ]
  --[ Receive_A_2( y ) ]->
   [ St_A_3( $A, id, $B, sk_AB, x, s, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3_Send:
   [ St_A_3( $A, id, $B, sk_AB, x, s, y ) ]
  --[
  Running( $A, $B, <'R', 'I', x, y, kdf(s, x, y)> ),
  Send_A_3( mac(<'A', 'B', y>, kdf(s, x, y)) )
  ]->
   [
   Out( mac(<'A', 'B', y>, kdf(s, x, y)) ),
   St_A_4( $A, id, $B, sk_AB, x, s, y, kdf(s, x, y) )
   ]

  /*
  rule (modulo AC) A_3_Send:
     [ St_A_3( $A, id, $B, sk_AB, x, s, y ) ]
    --[
    Running( $A, $B, <'R', 'I', x, y, kdf(s, x, y)> ),
    Send_A_3( <<'A', 'B', y>, senc(<'A', 'B', y>, kdf(s, x, y))> )
    ]->
     [
     Out( <<'A', 'B', y>, senc(<'A', 'B', y>, kdf(s, x, y))> ),
     St_A_4( $A, id, $B, sk_AB, x, s, y, kdf(s, x, y) )
     ]
  */

rule (modulo E) B_3_Recv:
   [
   In( mac(<'A', 'B', y>, kdf(s, x, y)) ),
   St_B_3( $B, id, $A, sk_AB, x, s, y )
   ]
  --[
  Secret( $B, kdf(s, x, y) ), Honest( $A ), Honest( $B ),
  Commit( $B, $A, <'R', 'I', x, y, kdf(s, x, y)> ),
  Receive_B_3( mac(<'A', 'B', y>, kdf(s, x, y)) ), Finish( $B )
  ]->
   [ St_B_4( $B, id, $A, sk_AB, x, s, y, kdf(s, x, y) ) ]

  /*
  rule (modulo AC) B_3_Recv:
     [
     In( <<'A', 'B', y>, senc(<'A', 'B', y>, kdf(s, x, y))> ),
     St_B_3( $B, id, $A, sk_AB, x, s, y )
     ]
    --[
    Secret( $B, kdf(s, x, y) ), Honest( $A ), Honest( $B ),
    Commit( $B, $A, <'R', 'I', x, y, kdf(s, x, y)> ),
    Receive_B_3( <<'A', 'B', y>, senc(<'A', 'B', y>, kdf(s, x, y))> ),
    Finish( $B )
    ]->
     [ St_B_4( $B, id, $A, sk_AB, x, s, y, kdf(s, x, y) ) ]
  */

rule (modulo E) B_4_Send:
   [ St_B_4( $B, id, $A, sk_AB, x, s, y, Kab ) ]
  --[
  Running( $B, $A, <'I', 'R', x, y, Kab> ),
  Send_B_4( mac(<'B', 'A', x>, Kab) )
  ]->
   [
   Out( mac(<'B', 'A', x>, Kab) ),
   St_B_5( $B, id, $A, sk_AB, x, s, y, Kab )
   ]

  /*
  rule (modulo AC) B_4_Send:
     [ St_B_4( $B, id, $A, sk_AB, x, s, y, Kab ) ]
    --[
    Running( $B, $A, <'I', 'R', x, y, Kab> ),
    Send_B_4( <<'B', 'A', x>, senc(<'B', 'A', x>, Kab)> )
    ]->
     [
     Out( <<'B', 'A', x>, senc(<'B', 'A', x>, Kab)> ),
     St_B_5( $B, id, $A, sk_AB, x, s, y, Kab )
     ]
  */

rule (modulo E) A_4_Recv:
   [
   In( mac(<'B', 'A', x>, Kab) ),
   St_A_4( $A, id, $B, sk_AB, x, s, y, Kab )
   ]
  --[
  Secret( $A, Kab ), Honest( $A ), Honest( $B ),
  Commit( $A, $B, <'I', 'R', x, y, Kab> ),
  Receive_A_4( mac(<'B', 'A', x>, Kab) ), Finish( $A )
  ]->
   [ St_A_5( $A, id, $B, sk_AB, x, y, Kab ) ]

  /*
  rule (modulo AC) A_4_Recv:
     [
     In( <<'B', 'A', x>, senc(<'B', 'A', x>, Kab)> ),
     St_A_4( $A, id, $B, sk_AB, x, s, y, Kab )
     ]
    --[
    Secret( $A, Kab ), Honest( $A ), Honest( $B ),
    Commit( $A, $B, <'I', 'R', x, y, Kab> ),
    Receive_A_4( <<'B', 'A', x>, senc(<'B', 'A', x>, Kab)> ),
    Finish( $A )
    ]->
     [ St_A_5( $A, id, $B, sk_AB, x, y, Kab ) ]
  */

restriction onekeyperpair:
  "∀ A B #i #j.
    ((Register( A, B ) @ #i) ∧ (Register( A, B ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executable:
  exists-trace
  "∃ A B #i #j.
    (((((Finish( A ) @ #i) ∧ (Finish( B ) @ #j)) ∧ (¬(A = B))) ∧
      (¬(∃ X #r. Reveal( X ) @ #r))) ∧
     (∀ A.1 B.1 id1 id2 #i.1 #j.1.
       ((Create( A.1, id1, 'A' ) @ #i.1) ∧
        (Create( B.1, id2, 'A' ) @ #j.1)) ⇒
       ((A.1 = B.1) ∧ (id1 = id2)))) ∧
    (∀ A.1 B.1 id1 id2 #i.1 #j.1.
      ((Create( A.1, id1, 'B' ) @ #i.1) ∧
       (Create( B.1, id2, 'B' ) @ #j.1)) ⇒
      ((A.1 = B.1) ∧ (id1 = id2)))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B #i #j.
  (Finish( A ) @ #i) ∧ (Finish( B ) @ #j)
 ∧
  (¬(A = B)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ⇒ ⊥) ∧
  (∀ A.1 B.1 id1 id2 #i.1 #j.1.
    (Create( A.1, id1, 'A' ) @ #i.1) ∧ (Create( B.1, id2, 'A' ) @ #j.1)
   ⇒
    (A.1 = B.1) ∧ (id1 = id2)) ∧
  (∀ A.1 B.1 id1 id2 #i.1 #j.1.
    (Create( A.1, id1, 'B' ) @ #i.1) ∧ (Create( B.1, id2, 'B' ) @ #j.1)
   ⇒
    (A.1 = B.1) ∧ (id1 = id2))"
*/
simplify
solve( Finish( A ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, y, Kab ) ▶₁ #i )
    case A_3_Send
    solve( Finish( B.1 ) @ #j )
      case B_3_Recv
      solve( St_B_3( $B.1, id.1, $A.1, sk_AB, x.1, s.1, y.1 ) ▶₁ #j )
        case B_2_Send
        solve( !KU( senc(<'B', 'A', ~x>, kdf(~s, ~x, y)) ) @ #vk.9 )
          case B_4_Send
          solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.13 )
            case A_1_Send
            solve( !KU( ~x ) @ #vk.10 )
              case A_1_Send
              solve( !KU( ~y ) @ #vk.12 )
                case B_2_Send
                solve( !KU( senc(<'A', 'B', ~y>, kdf(~s, ~x, ~y)) ) @ #vk.13 )
                  case A_3_Send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, y, x.1 ) ▶₁ #i )
    case A_3_Send
    solve( !KU( kdf(~s, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~s ) @ #vk.9 )
        case A_1_Send
        solve( !KU( ~sk ) @ #vk.11 )
          case Reveal_A
          by contradiction /* from formulas */
        next
          case Reveal_B
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, s, y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( kdf(s, x, ~y) ) @ #vk )
      case c_kdf
      solve( !KU( senc(<'A', 'B', ~y>, kdf(s, x, ~y)) ) @ #vk.7 )
        case A_3_Send
        solve( !KU( ~s ) @ #vk.11 )
          case A_1_Send
          solve( !KU( ~sk.1 ) @ #vk.13 )
            case Reveal_A
            solve( !KU( senc(~s, h(~sk)) ) @ #vk.13 )
              case A_1_Send
              by contradiction /* from formulas */
            next
              case c_senc
              solve( !KU( h(~sk) ) @ #vk.14 )
                case c_h
                solve( !KU( ~sk ) @ #vk.15 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Reveal_B
            solve( !KU( senc(~s, h(~sk)) ) @ #vk.13 )
              case A_1_Send
              by contradiction /* from formulas */
            next
              case c_senc
              solve( !KU( h(~sk) ) @ #vk.14 )
                case c_h
                solve( !KU( ~sk ) @ #vk.15 )
                  case Reveal_A
                  by contradiction /* from formulas */
                next
                  case Reveal_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( senc(s, h(~sk)) ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.11 )
            case A_1_Send
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.12 )
            case c_h
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, y, Kab ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(<'B', 'A', ~x>, kdf(~s, ~x, y)) ) @ #vk.6 )
      case B_4_Send
      solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.13 )
        case A_1_Send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.14 )
          case A_1_Send
          solve( !KU( ~sk ) @ #vk.17 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.8 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.9 )
          case A_1_Send
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, s, y, Kab ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(<'B', 'A', ~x>, kdf(~s, ~x, y)) ) @ #vk.6 )
      case B_4_Send
      solve( !KU( senc(~s, h(~sk.1)) ) @ #vk.13 )
        case A_1_Send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case A_4_Recv
            solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, s.1, ~y,
                           kdf(~s, ~x, ~y)
                   ) ▶₁ #i2 )
              case A_3_Send
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case A_4_Recv
            solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, s.1, ~y,
                           kdf(~s, ~x, ~y)
                   ) ▶₁ #i2 )
              case A_3_Send
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.14 )
          case A_1_Send
          solve( !KU( ~sk ) @ #vk.17 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.8 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.9 )
          case A_1_Send
          solve( !KU( ~sk ) @ #vk.11 )
            case Reveal_A
            by contradiction /* from formulas */
          next
            case Reveal_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, s, y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(<'A', 'B', ~y>, kdf(s, x, ~y)) ) @ #vk.6 )
      case A_3_Send
      solve( !KU( senc(~s, h(~sk)) ) @ #vk.9 )
        case A_1_Send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~sk.1 ) @ #vk.13 )
            case Reveal_A
            solve( !KU( h(~sk) ) @ #vk.13 )
              case c_h
              solve( !KU( ~sk ) @ #vk.14 )
                case Reveal_A
                by contradiction /* from formulas */
              next
                case Reveal_B
                by contradiction /* from formulas */
              qed
            qed
          next
            case Reveal_B
            solve( !KU( h(~sk) ) @ #vk.13 )
              case c_h
              solve( !KU( ~sk ) @ #vk.14 )
                case Reveal_A
                by contradiction /* from formulas */
              next
                case Reveal_B
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( kdf(s, x, ~y) ) @ #vk.10 )
        case c_kdf
        solve( !KU( senc(s, h(~sk)) ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.11 )
            case A_1_Send
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.12 )
            case c_h
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, s, y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(<'A', 'B', ~y>, kdf(s, x, ~y)) ) @ #vk.6 )
      case A_3_Send
      solve( !KU( senc(~s, h(~sk)) ) @ #vk.9 )
        case A_1_Send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case B_3_Recv
            solve( St_B_3( $B.1, id.1, $A.1, sk_AB, ~x, ~s, ~y ) ▶₁ #i2 )
              case B_2_Send
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case B_3_Recv
            solve( St_B_3( $B.1, id.1, $A.1, sk_AB, ~x, ~s, ~y ) ▶₁ #i2 )
              case B_2_Send
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~sk.1 ) @ #vk.13 )
            case Reveal_A
            solve( !KU( h(~sk) ) @ #vk.13 )
              case c_h
              solve( !KU( ~sk ) @ #vk.14 )
                case Reveal_A
                by contradiction /* from formulas */
              next
                case Reveal_B
                by contradiction /* from formulas */
              qed
            qed
          next
            case Reveal_B
            solve( !KU( h(~sk) ) @ #vk.13 )
              case c_h
              solve( !KU( ~sk ) @ #vk.14 )
                case Reveal_A
                by contradiction /* from formulas */
              next
                case Reveal_B
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( kdf(s, x, ~y) ) @ #vk.10 )
        case c_kdf
        solve( !KU( senc(s, h(~sk)) ) @ #vk.10 )
          case A_1_Send
          solve( !KU( ~s ) @ #vk.11 )
            case A_1_Send
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~sk) ) @ #vk.12 )
            case c_h
            solve( !KU( ~sk ) @ #vk.13 )
              case Reveal_A
              by contradiction /* from formulas */
            next
              case Reveal_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end