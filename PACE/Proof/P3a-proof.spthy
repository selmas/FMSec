theory P3a begin

// Function signature and definition of the equational theory E

functions: fst/1, kdf/3, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    mac(m, k) = <m, senc(m, k)>,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register:
   [ Fr( ~sk ) ] --[ Register( $I, $R ) ]-> [ !Lkt( $I, $R, ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_A:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $I ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_B:
   [ !Lkt( $I, $R, ltk ) ] --[ Reveal( $R ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $A, ~id, 'A' ) ]->
   [ St_A_1( $A, ~id, $B, sk_AB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Lkt( $A, $B, sk_AB ) ]
  --[ Create( $B, ~id, 'B' ) ]->
   [ St_B_1( $B, ~id, $A, sk_AB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_Send:
   [ Fr( ~x ), St_A_1( $A, id, $B, sk_AB ) ]
  --[ Send_A_1( ~x ) ]->
   [ Out( ~x ), St_A_2( $A, id, $B, sk_AB, ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_Recv:
   [ In( x ), St_B_1( $B, id, $A, sk_AB ) ]
  --[ Receive_B_1( x ) ]->
   [ St_B_2( $B, id, $A, sk_AB, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_Send:
   [ Fr( ~y ), St_B_2( $B, id, $A, sk_AB, x ) ]
  --[ Send_B_2( ~y ) ]->
   [ Out( ~y ), St_B_3( $B, id, $A, sk_AB, x, ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_Recv:
   [ In( y ), St_A_2( $A, id, $B, sk_AB, x ) ]
  --[ Receive_A_2( y ) ]->
   [ St_A_3( $A, id, $B, sk_AB, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_3_Send:
   [ St_A_3( $A, id, $B, sk_AB, x, y ) ]
  --[
  Running( $A, $B, <'R', 'I', y> ),
  Send_A_3( mac(<$B, y>, kdf(sk_AB, x, y)) )
  ]->
   [
   Out( mac(<$B, y>, kdf(sk_AB, x, y)) ),
   St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) )
   ]

  /*
  rule (modulo AC) A_3_Send:
     [ St_A_3( $A, id, $B, sk_AB, x, y ) ]
    --[
    Running( $A, $B, <'R', 'I', y> ),
    Send_A_3( <<$B, y>, senc(<$B, y>, kdf(sk_AB, x, y))> )
    ]->
     [
     Out( <<$B, y>, senc(<$B, y>, kdf(sk_AB, x, y))> ),
     St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) )
     ]
  */

rule (modulo E) B_3_Recv:
   [
   In( mac(<$B, y>, kdf(sk_AB, x, y)) ),
   St_B_3( $B, id, $A, sk_AB, x, y )
   ]
  --[
  Secret( $B, kdf(sk_AB, x, y) ), Honest( $A ), Honest( $B ),
  Commit( $B, $A, <'R', 'I', y> ),
  Receive_B_3( mac(<$B, y>, kdf(sk_AB, x, y)) ), Finish( $B )
  ]->
   [ St_B_4( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) ) ]

  /*
  rule (modulo AC) B_3_Recv:
     [
     In( <<$B, y>, senc(<$B, y>, kdf(sk_AB, x, y))> ),
     St_B_3( $B, id, $A, sk_AB, x, y )
     ]
    --[
    Secret( $B, kdf(sk_AB, x, y) ), Honest( $A ), Honest( $B ),
    Commit( $B, $A, <'R', 'I', y> ),
    Receive_B_3( <<$B, y>, senc(<$B, y>, kdf(sk_AB, x, y))> ),
    Finish( $B )
    ]->
     [ St_B_4( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) ) ]
  */

rule (modulo E) B_4_Send:
   [ St_B_4( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) ) ]
  --[
  Running( $B, $A, <'I', 'R', x> ),
  Send_B_4( mac(<$A, x>, kdf(sk_AB, x, y)) )
  ]->
   [
   Out( mac(<$A, x>, kdf(sk_AB, x, y)) ),
   St_B_5( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) )
   ]

  /*
  rule (modulo AC) B_4_Send:
     [ St_B_4( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) ) ]
    --[
    Running( $B, $A, <'I', 'R', x> ),
    Send_B_4( <<$A, x>, senc(<$A, x>, kdf(sk_AB, x, y))> )
    ]->
     [
     Out( <<$A, x>, senc(<$A, x>, kdf(sk_AB, x, y))> ),
     St_B_5( $B, id, $A, sk_AB, x, y, kdf(sk_AB, x, y) )
     ]
  */

rule (modulo E) A_4_Recv:
   [
   In( mac(<$A, x>, kdf(sk_AB, x, y)) ),
   St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) )
   ]
  --[
  Secret( $A, kdf(sk_AB, x, y) ), Honest( $A ), Honest( $B ),
  Commit( $A, $B, <'I', 'R', x> ),
  Receive_A_4( mac(<$A, x>, kdf(sk_AB, x, y)) ), Finish( $A )
  ]->
   [ St_A_5( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) ) ]

  /*
  rule (modulo AC) A_4_Recv:
     [
     In( <<$A, x>, senc(<$A, x>, kdf(sk_AB, x, y))> ),
     St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) )
     ]
    --[
    Secret( $A, kdf(sk_AB, x, y) ), Honest( $A ), Honest( $B ),
    Commit( $A, $B, <'I', 'R', x> ),
    Receive_A_4( <<$A, x>, senc(<$A, x>, kdf(sk_AB, x, y))> ),
    Finish( $A )
    ]->
     [ St_A_5( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) ) ]
  */

restriction onekeyperpair:
  "∀ A B #i #j.
    ((Register( A, B ) @ #i) ∧ (Register( A, B ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction nokeywithyourself:
  "∀ A B #i. (Register( A, B ) @ #i) ⇒ (¬(A = B))"
  // safety formula

lemma executable:
  exists-trace
  "∃ A B #i #j.
    ((Finish( A ) @ #i) ∧ (Finish( B ) @ #j)) ∧ (¬(A = B))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B #i #j. (Finish( A ) @ #i) ∧ (Finish( B ) @ #j) ∧ ¬(A = B)"
*/
simplify
solve( Finish( A ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) ) ▶₁ #i )
    case A_3_Send
    solve( Finish( B.1 ) @ #j )
      case A_4_Recv
      solve( St_A_4( $A.1, id.1, $B.1, sk_AB, x.1, y.1,
                     kdf(sk_AB, x.1, y.1)
             ) ▶₁ #j )
        case A_3_Send
        solve( !KU( senc(<$A, ~x>, kdf(~sk, ~x, y)) ) @ #vk.4 )
          case B_4_Send
          solve( !KU( senc(<$A.1, ~x.1>, kdf(~sk.1, ~x.1, y.1)) ) @ #vk.11 )
            case B_4_Send
            solve( !KU( ~x ) @ #vk.5 )
              case A_1_Send
              solve( !KU( ~x.1 ) @ #vk.12 )
                case A_1_Send
                solve( !KU( ~y ) @ #vk.8 )
                  case B_2_Send
                  solve( !KU( ~y.1 ) @ #vk.13 )
                    case B_2_Send
                    solve( !KU( senc(<$B, ~y>, kdf(~sk, ~x, ~y)) ) @ #vk.17 )
                      case A_3_Send
                      solve( !KU( senc(<$B.1, ~y.1>, kdf(~sk.1, ~x.1, ~y.1)) ) @ #vk.19 )
                        case A_3_Send
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, x, y, kdf(sk_AB, x, y) ) ▶₁ #i )
    case A_3_Send
    solve( !KU( kdf(~sk, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~sk ) @ #vk.7 )
        case Reveal_A
        by contradiction /* from formulas */
      next
        case Reveal_B
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, y ) ▶₁ #i )
    case B_2_Send
    solve( !KU( kdf(~sk, x, ~y) ) @ #vk )
      case c_kdf
      solve( !KU( ~sk ) @ #vk.7 )
        case Reveal_A
        by contradiction /* from formulas */
      next
        case Reveal_B
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, t, y, kdf(sk_AB, t, y) ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(<$A, ~x>, kdf(~sk, ~x, y)) ) @ #vk.4 )
      case A_3_Send
      by contradiction /* from formulas */
    next
      case B_4_Send
      by contradiction /* from formulas */
    next
      case c_senc
      solve( !KU( kdf(~sk, ~x, y) ) @ #vk.6 )
        case c_kdf
        solve( !KU( ~sk ) @ #vk.7 )
          case Reveal_A
          by contradiction /* from formulas */
        next
          case Reveal_B
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_Recv
  solve( St_A_4( $A, id, $B, sk_AB, t, y, kdf(sk_AB, t, y) ) ▶₁ #i )
    case A_3_Send
    solve( !KU( senc(<$A, ~x>, kdf(~sk, ~x, y)) ) @ #vk.4 )
      case A_3_Send
      by contradiction /* from formulas */
    next
      case B_4_Send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
          case A_4_Recv
          solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, y.1,
                         kdf(sk_AB, ~x, y.1)
                 ) ▶₁ #i2 )
            case A_3_Send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
          case A_4_Recv
          solve( St_A_4( $A.1, id.1, $B.1, sk_AB, ~x, y.1,
                         kdf(sk_AB, ~x, y.1)
                 ) ▶₁ #i2 )
            case A_3_Send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( kdf(~sk, ~x, y) ) @ #vk.6 )
        case c_kdf
        solve( !KU( ~sk ) @ #vk.7 )
          case Reveal_A
          by contradiction /* from formulas */
        next
          case Reveal_B
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, t ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(<$B, ~y>, kdf(~sk, x, ~y)) ) @ #vk.4 )
      case A_3_Send
      by contradiction /* from formulas */
    next
      case B_4_Send
      by contradiction /* cyclic */
    next
      case c_senc
      solve( !KU( kdf(~sk, x, ~y) ) @ #vk.6 )
        case c_kdf
        solve( !KU( ~sk ) @ #vk.7 )
          case Reveal_A
          by contradiction /* from formulas */
        next
          case Reveal_B
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_3_Recv
  solve( St_B_3( $B, id, $A, sk_AB, x, t ) ▶₁ #i )
    case B_2_Send
    solve( !KU( senc(<$B, ~y>, kdf(~sk, x, ~y)) ) @ #vk.4 )
      case A_3_Send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', ~y> ) @ #i2 )
          case B_3_Recv
          solve( St_B_3( $B.1, id.1, $A.1, sk_AB, x.1, ~y ) ▶₁ #i2 )
            case B_2_Send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'R', 'I', ~y> ) @ #i2 )
          case B_3_Recv
          solve( St_B_3( $B.1, id.1, $A.1, sk_AB, x.1, ~y ) ▶₁ #i2 )
            case B_2_Send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case B_4_Send
      by contradiction /* cyclic */
    next
      case c_senc
      solve( !KU( kdf(~sk, x, ~y) ) @ #vk.6 )
        case c_kdf
        solve( !KU( ~sk ) @ #vk.7 )
          case Reveal_A
          by contradiction /* from formulas */
        next
          case Reveal_B
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end